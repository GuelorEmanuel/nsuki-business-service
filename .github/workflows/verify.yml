name: Elixir CI

on:
  push:

jobs:
  verify:
    runs-on:  ubuntu-latest
    strategy:
      matrix:
        otp: [22.2.7]
        elixir: [1.10.3]

    services:
      db:
        image: postgres:12
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: nsuki_business_service_dev
        ports: ['5432:5432']
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-elixir@v1
        with:
          otp-version: ${{ matrix.otp }}
          elixir-version: ${{ matrix.elixir }}
      
      - uses: actions/cache@v1
        id: deps-cache
        with:
          path: deps
          key: ${{ runner.os }}-mix-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}

      - uses: actions/cache@v1
        id: build-cache
        with:
          path: _build
          key: ${{ runner.os }}-build-${{ matrix.otp }}-${{ matrix.elixir }}-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}

      - name: Install deps
        run: |
          mix deps.get
      - run: mix test
      
  deploy:
    needs: verify # Will only run if the verify job succeeds
      if: github.ref == 'refs/heads/master' # Only run this job if it is on the master branch
        runs-on: ubuntu-latest

        steps:
          - uses: actions/checkout@v2
            # actions/checkout@v2 only checks out the latest commit,
            # so we need to tell it to check out the entire master branch
            with:
              ref: master # Checkout master instead of the latest commit
              fetch-depth: 0 # Checkout the whole branch
          
          # configure the gigalixir-actions with our credentials and app name
          - uses: mhanberg/gigalixir-action@<current release>
            with:
              GIGALIXIR_USERNAME: ${{ secrets.GIGALIXIR_USERNAME }}
              GIGALIXIR_PASSWORD: ${{ secrets.GIGALIXIR_PASSWORD }}
              GIGALIXIR_APP: ${{ secrets.GIGALIXIR_APP }}
              SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
              MIGRATIONS: false  # defaults to true


